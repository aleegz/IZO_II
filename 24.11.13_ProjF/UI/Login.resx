<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        Iy1yBAAAAABJRU5ErkJggg==
</value>
  </data>
</root>